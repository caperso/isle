{"version":3,"sources":["assets/js/service.ts","components/core/Heartbeat.tsx","pages/home/components/HamButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServerApi","api","name","destination","axios","get","this","serverUrl","result","payload","post","Heartbeat","useEffect","route","window","location","href","message","hello","bye","sendHeartbeat","onbeforeunload","HamButton","HamWrapper","className","onClick","aria-label","to","styled","div","Gallery","React","lazy","Home","SiteRecord","Solar","App","AppWrapper","Suspense","fallback","from","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAyBqBA,E,kJAIsDC,EAAaC,G,gFAC5EC,EAAcD,EAAI,UAAMD,EAAN,YAAaC,GAAb,UAAyBD,G,SAC1BG,IAAMC,IAAN,UAAgBC,KAAKC,UAArB,YAAkCJ,I,cAAjDK,E,yBACCA,G,sLAGiDP,EAAaQ,G,uFAChDL,IAAMM,KAAN,UAAiBJ,KAAKC,UAAtB,YAAmCN,GAAOQ,G,cAAzDD,E,yBACCA,G,gHAZMR,EACHO,UAAY,2B,wwBCvBvB,IAAMI,EAAY,WAerB,OAdAC,qBAAU,WACN,IAAMH,EAAU,CAAEI,MAAOC,OAAOC,SAASC,KAAMC,QAAS,IAClDC,EAAK,KAAQT,EAAR,CAAiBQ,QAAS,YAC/BE,EAAG,KAAQV,EAAR,CAAiBQ,QAAS,aAE/BjB,IAAUoB,cAAc,wBAAyBF,GAMrDJ,OAAOO,eAJP,WACIrB,IAAUoB,cAAc,wBAAyBD,MAItD,IAEI,sC,gnECdJ,IAAMG,EAAY,WAGvB,OACE,kBAACC,EAAD,KACE,uBAAGC,UAAU,oBAAoBC,QAJpB,aAIuCC,aAAW,SAC/D,yBAAKF,UAAU,gBACb,kBAAC,IAAD,CAAMG,GAAG,WAAWH,UAAU,eAA9B,oBAGA,kBAAC,IAAD,CAAMG,GAAG,QAAQH,UAAU,eAA3B,WAQFD,EAAaK,IAAOC,IAAV,K,q0BCdhB,IAAMC,EAAUC,IAAMC,MAAK,kBAAM,uDAC3BC,EAAOD,gBAAK,kBAAM,8DAClBE,EAAaF,gBAAK,kBAAM,iCACxBG,EAAQH,gBAAK,kBAAM,kCA2BVI,EAzBO,WAClB,OACI,kBAACC,EAAD,KACI,kBAAC,IAAD,KACI,yBAAKb,UAAU,UACX,yBAAKA,UAAU,eAAf,WACA,yBAAKA,UAAU,gBACX,kBAAC,EAAD,QAGR,kBAAC,IAAMc,SAAP,CAAgBC,SAAU,4CACtB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,KAAK,IAAIC,OAAO,EAAMd,GAAG,UACnC,kBAAC,IAAD,CAAOe,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWb,KAEtC,kBAACI,EAAD,MACA,kBAACC,EAAD,OAEJ,kBAAC,EAAD,SAQVE,EAAaT,IAAOC,IAAV,K,MC5BIe,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1e1d3bec.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nexport interface RecordData {\n    [propName: string]: { timestamp: string; value: string };\n}\n\ninterface BaseDataQueryDto {\n    id: number;\n    record: RecordData;\n    createAt?: string;\n    updateAt?: string;\n    deleteAt?: string;\n}\nexport interface EstateDataDto extends BaseDataQueryDto {}\nexport interface PriceDataDto extends BaseDataQueryDto {}\n\nexport interface HeartbeatDto {\n    message: string;\n    route: string;\n}\n\n/**\n * 用于调用服务端接口\n * @export\n */\nexport default class ServerApi {\n    public static serverUrl = 'https://caperal.cn:3141';\n    // public static serverUrl = 'http://localhost:3141';\n\n    public static async getListData<T = AxiosResponse<BaseDataQueryDto[]>>(api: string, name?: string) {\n        let destination = name ? `${api}/${name}` : `${api}`;\n        const result = await axios.get<T>(`${this.serverUrl}/${destination}`);\n        return result;\n    }\n\n    public static async sendHeartbeat<T = AxiosResponse<any[]>>(api: string, payload: any) {\n        const result = await axios.post<T>(`${this.serverUrl}/${api}`, payload);\n        return result;\n    }\n}\n","import React, { useEffect } from 'react';\nimport ServerApi from '../../assets/js/service';\n\nexport const Heartbeat = () => {\n    useEffect(() => {\n        const payload = { route: window.location.href, message: '' };\n        const hello = { ...payload, message: 'step in' };\n        const bye = { ...payload, message: 'step out' };\n        function sayHello() {\n            ServerApi.sendHeartbeat('server/heartbeat/beep', hello);\n        }\n        function sayBye() {\n            ServerApi.sendHeartbeat('server/heartbeat/beep', bye);\n        }\n        sayHello();\n        window.onbeforeunload = sayBye;\n    }, []);\n\n    return <></>;\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const HamButton = () => {\n  const showMenu = () => {};\n\n  return (\n    <HamWrapper>\n      <i className=\"header-ham-button\" onClick={showMenu} aria-label=\"menu\"></i>\n      <div className=\"header-links\">\n        <Link to=\"/gallery\" className=\"header-link\">\n          MINNIE's GALLERY\n        </Link>\n        <Link to=\"/home\" className=\"header-link\">\n          HOME\n        </Link>\n      </div>\n    </HamWrapper>\n  );\n};\n\nconst HamWrapper = styled.div`\n.header-links > * {\n        margin-left: 1rem;\n        letter-spacing: 0.07rem;\n      }\n\n      .header-links > *:hover {\n        color: white;\n      }\n\n      .header-ham-button {\n        opacity: 0;\n        visibility: hidden;\n        position: absolute;\n        top: 50%;\n        right: 0;\n        transform: translateY(-50%);\n        display: block;\n        width: 1.5625rem;\n        height: 1.5625rem;\n        border: 0.08rem solid rgb(102, 102, 102);\n        border-radius: 0.175rem;\n        background-color: transparent;\n        cursor: pointer;\n\n        &:after {\n          content: \"\";\n          position: absolute;\n          left: 50%;\n          transform: translateX(-50%);\n          width: 60%;\n          height: 100%;\n          background: repeating-linear-gradient(\n            transparent 0,\n            transparent 20%,\n            rgb(142, 142, 142) 22%,\n            rgb(142, 142, 142) 28%,\n            transparent 30%,\n            transparent 45%,\n            rgb(142, 142, 142) 47%,\n            rgb(142, 142, 142) 53%,\n            transparent 55%,\n            transparent 70%,\n            rgb(142, 142, 142) 72%,\n            rgb(142, 142, 142) 78%,\n            transparent 80%,\n            transparent 100%\n          );\n        }\n      }\n\n      @media screen and (max-width: 768px) {\n        .header-links {\n          display: flex;\n          position: absolute;\n          top: calc(2rem + 1.5625rem / 2);\n          right: 0%;\n          line-height: 3.15;\n          text-align: right;\n          flex-flow: column;\n          justify-content: flex-start;\n        }\n\n        .header-links {\n          opacity: 0;\n          visibility: hidden;\n        }\n\n        .header-ham-button {\n          opacity: 1;\n          visibility: visible;\n        }\n\n        .header-ham-button:hover ~ .header-links,\n        .header-links:hover {\n          opacity: 1;\n          visibility: visible;\n          border-top: none;\n          border-right: none;\n          border-radius: 2px;\n        }\n      }\n    }\n`\n","import React, { lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport './assets/css/solar.css';\nimport { Heartbeat } from './components/core/Heartbeat';\nimport { HamButton } from './pages/home/components/HamButton';\n\nconst Gallery = React.lazy(() => import('./pages/gallery/Gallery'));\nconst Home = lazy(() => import('./pages/home/Home'));\nconst SiteRecord = lazy(() => import('./pages/site-record/SiteRecord'));\nconst Solar = lazy(() => import('./pages/solar/Solar'));\n\nconst App: React.FC = () => {\n    return (\n        <AppWrapper>\n            <HashRouter>\n                <div className=\"header\">\n                    <div className=\"header-left\">CAPERAL</div>\n                    <div className=\"header-right\">\n                        <HamButton />\n                    </div>\n                </div>\n                <React.Suspense fallback={<div>loading...</div>}>\n                    <Switch>\n                        <Redirect from=\"/\" exact={true} to=\"/home\" />\n                        <Route path=\"/home\" component={Home} />\n                        <Route path=\"/gallery\" component={Gallery} />\n                    </Switch>\n                    <SiteRecord />\n                    <Solar />\n                </React.Suspense>\n                <Heartbeat />\n            </HashRouter>\n        </AppWrapper>\n    );\n};\n\nexport default App;\n\nconst AppWrapper = styled.div`\n    overflow-x: hidden;\n    @media screen and (min-width: 1000px) {\n        width: 90vw;\n        margin: 0 auto;\n        max-width: 1000px;\n    }\n\n    .header {\n        display: flex;\n        flex-flow: row nowrap;\n        justify-content: space-between;\n        height: 4rem;\n        line-height: 4rem;\n        padding: 0 2rem;\n        text-transform: uppercase;\n        box-sizing: border-box;\n        color: rgb(102, 102, 102);\n\n        .header-left {\n            letter-spacing: 0.2rem;\n\n            &:hover {\n                color: white;\n            }\n        }\n\n        .header-right {\n            display: flex;\n            flex-flow: row;\n            position: relative;\n            justify-content: center;\n        }\n    }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/css/reset.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}